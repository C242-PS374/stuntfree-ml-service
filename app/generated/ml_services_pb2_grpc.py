# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from generated import ml_services_pb2 as ml__services__pb2

from controller.image_detection import ImageService
from controller.predict_stunting import StuntingService
from controller.predict_nutrition import NutritionService
from controller.health_check import HealthCheck

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ml_services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MLServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ImageDetection = channel.unary_unary(
                '/MLService/ImageDetection',
                request_serializer=ml__services__pb2.ImageRequest.SerializeToString,
                response_deserializer=ml__services__pb2.ImageResponse.FromString,
                _registered_method=True)
        self.PredictNutrition = channel.unary_unary(
                '/MLService/PredictNutrition',
                request_serializer=ml__services__pb2.NutritionRequest.SerializeToString,
                response_deserializer=ml__services__pb2.NutritionResponse.FromString,
                _registered_method=True)
        self.PredictStunting = channel.unary_unary(
                '/MLService/PredictStunting',
                request_serializer=ml__services__pb2.StuntingRequest.SerializeToString,
                response_deserializer=ml__services__pb2.StuntingResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/MLService/HealthCheck',
                request_serializer=ml__services__pb2.Empty.SerializeToString,
                response_deserializer=ml__services__pb2.HealthResponse.FromString,
                _registered_method=True)


class MLServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ImageDetection(self, request, context):
        return ImageService().ImageDetection(request, context)

    def PredictNutrition(self, request, context):
        return NutritionService().PredictNutrition(request, context)

    def PredictStunting(self, request, context):
        return StuntingService().PredictStunting(request, context)

    def HealthCheck(self, request, context):
        return HealthCheck().HealthCheck(request, context)


def add_MLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ImageDetection': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageDetection,
                    request_deserializer=ml__services__pb2.ImageRequest.FromString,
                    response_serializer=ml__services__pb2.ImageResponse.SerializeToString,
            ),
            'PredictNutrition': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictNutrition,
                    request_deserializer=ml__services__pb2.NutritionRequest.FromString,
                    response_serializer=ml__services__pb2.NutritionResponse.SerializeToString,
            ),
            'PredictStunting': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictStunting,
                    request_deserializer=ml__services__pb2.StuntingRequest.FromString,
                    response_serializer=ml__services__pb2.StuntingResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=ml__services__pb2.Empty.FromString,
                    response_serializer=ml__services__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MLService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MLService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ImageDetection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MLService/ImageDetection',
            ml__services__pb2.ImageRequest.SerializeToString,
            ml__services__pb2.ImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PredictNutrition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MLService/PredictNutrition',
            ml__services__pb2.NutritionRequest.SerializeToString,
            ml__services__pb2.NutritionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PredictStunting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MLService/PredictStunting',
            ml__services__pb2.StuntingRequest.SerializeToString,
            ml__services__pb2.StuntingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MLService/HealthCheck',
            ml__services__pb2.Empty.SerializeToString,
            ml__services__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
